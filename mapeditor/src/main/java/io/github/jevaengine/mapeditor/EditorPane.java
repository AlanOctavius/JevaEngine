/*******************************************************************************
 * Copyright (c) 2013 Jeremy.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 * 
 * If you'd like to obtain a another license to this code, you may contact Jeremy to discuss alternative redistribution options.
 * 
 * Contributors:
 *     Jeremy - initial API and implementation
 ******************************************************************************/
package io.github.jevaengine.mapeditor;

import io.github.jevaengine.config.VariableStore;
import io.github.jevaengine.world.WorldDirection;

import java.awt.Choice;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;

import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import net.miginfocom.swing.MigLayout;

/*
 * 
 * This code is a complete mess, it is generated by an IDE Editor
 * 
 * I'm sorry.
 * 
 */

public class EditorPane extends JFrame
{
	private static final long serialVersionUID = 1L;

	private JPanel contentPane;
	private JTextField txtWorldWidth;
	private JTextField txtTileWidth;
	private JTextField txtWorldHeight;
	private JTextField txtTileHeight;

	private JLabel lblSelectedX;
	private JLabel lblSelectedY;

	private IEditorPaneListener m_editorListener;
	private JTextField txtSelectedSprite;

	private JCheckBox chkTraversable;
	private JCheckBox chkStatic;

	private JComboBox<?> lstDirection;
	private JComboBox<?> lstSpriteAnimation;

	private JList<EditorEntity> lstEntities;
	private DefaultListModel<EditorEntity> lstEntitiesModel = new DefaultListModel<EditorEntity>();

	private JRadioButton radSelection;
	private JRadioButton radBrush;

	private EditorTile m_selectedTile = null;
	private JTextField txtEntityName;
	private JTextField txtEntityArguments;
	private JTextField txtEntityClass;

	DefaultComboBoxModel<?> lstEntityVariableModel = new DefaultComboBoxModel(new String[] {});
	private JTextField txtEntityVariableValue;

	final JSpinner spinnerEntityLayer = new JSpinner();

	private JComboBox lstEntityVariable;

	private JSlider sldObstruction;
	private JLabel lblObstructionValue;

	private Choice lstLayer;
	private JTextField txtScript;

	private JCheckBox chckbxEnableSplitting;

	public EditorPane(IEditorPaneListener editorListener)
	{

		m_editorListener = editorListener;
		initGUI();
	}

	private void initGUI()
	{
		setAlwaysOnTop(true);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 424, 583);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(new MigLayout("", "[grow]", "[grow]"));

		JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		contentPane.add(tabbedPane, "cell 0 0,grow");

		JPanel panel = new JPanel();
		tabbedPane.addTab("World", null, panel, null);
		panel.setLayout(new MigLayout("", "[grow][grow][][][grow]", "[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][grow][][]"));

		JLabel lblLayer = new JLabel("Layer");
		panel.add(lblLayer, "cell 0 0,alignx right");

		lstLayer = new Choice();
		lstLayer.addItemListener(new ItemListener()
		{
			public void itemStateChanged(ItemEvent e)
			{
				do_lstLayer_itemStateChanged(e);
			}
		});

		panel.add(lstLayer, "cell 1 0,growx");

		JButton btnNew = new JButton("New");
		btnNew.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnNew_actionPerformed(e);
			}
		});
		panel.add(btnNew, "flowx,cell 2 0");

		JLabel lblWorld = new JLabel("Width");
		panel.add(lblWorld, "cell 1 1,alignx center,aligny center");

		JLabel lblTiles = new JLabel("Height");
		panel.add(lblTiles, "cell 2 1,alignx center");

		JLabel lblTilesX = new JLabel("World");
		panel.add(lblTilesX, "cell 0 2,alignx left");

		txtWorldWidth = new JTextField();
		panel.add(txtWorldWidth, "cell 1 2,growx");
		txtWorldWidth.setColumns(10);

		txtWorldHeight = new JTextField();
		panel.add(txtWorldHeight, "cell 2 2,growx");
		txtWorldHeight.setColumns(10);

		JLabel lblTilesY = new JLabel("Tiles");
		panel.add(lblTilesY, "cell 0 3");

		txtTileWidth = new JTextField();
		panel.add(txtTileWidth, "cell 1 3,growx");
		txtTileWidth.setColumns(10);

		txtTileHeight = new JTextField();
		panel.add(txtTileHeight, "cell 2 3,growx");
		txtTileHeight.setColumns(10);

		JButton btnNewButton = new JButton("Create World");
		btnNewButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnNewButton_actionPerformed(e);
			}
		});
		panel.add(btnNewButton, "cell 2 5");

		JSeparator separator = new JSeparator();
		panel.add(separator, "cell 0 9 5 1,growx");

		JLabel lblNewLabel = new JLabel("Selected Component \\ Brush");
		panel.add(lblNewLabel, "flowy,cell 0 10 5 1,growx");

		JLabel lblX = new JLabel("X:");
		panel.add(lblX, "cell 0 11,alignx right");

		lblSelectedX = new JLabel("0");
		panel.add(lblSelectedX, "cell 1 11");

		JLabel lblY = new JLabel("Y:");
		panel.add(lblY, "cell 0 12,alignx right");

		lblSelectedY = new JLabel("0");
		panel.add(lblSelectedY, "cell 1 12");

		JLabel lblClassName = new JLabel("Sprite");
		panel.add(lblClassName, "cell 0 13");

		txtSelectedSprite = new JTextField();
		panel.add(txtSelectedSprite, "cell 1 13,growx");
		txtSelectedSprite.setColumns(10);

		chkTraversable = new JCheckBox("Traversable");
		panel.add(chkTraversable, "cell 2 13");

		JLabel lblAnimation = new JLabel("Animation");
		panel.add(lblAnimation, "cell 0 14");

		ButtonGroup radSelType = new ButtonGroup();

		lstSpriteAnimation = new JComboBox();
		lstSpriteAnimation.setEditable(true);
		lstSpriteAnimation.setModel(new DefaultComboBoxModel(new String[]
		{ "idle", "walking", "attack", "die" }));
		panel.add(lstSpriteAnimation, "cell 1 14,growx");
		radSelType.add(radBrush);

		chkStatic = new JCheckBox("Static");
		panel.add(chkStatic, "cell 2 14");

		JLabel lblNewLabel_1 = new JLabel("Direction");
		panel.add(lblNewLabel_1, "cell 0 15,growx");

		lstDirection = new JComboBox();
		lstDirection.setModel(new DefaultComboBoxModel(WorldDirection.values()));
		panel.add(lstDirection, "cell 1 15,growx");

		chckbxEnableSplitting = new JCheckBox("Enable Splitting");
		panel.add(chckbxEnableSplitting, "cell 2 15");

		JLabel lblVisObstruction = new JLabel("Vis. Obstruction");
		panel.add(lblVisObstruction, "cell 0 16");

		sldObstruction = new JSlider();
		sldObstruction.setValue(100);
		sldObstruction.addChangeListener(new ChangeListener()
		{
			public void stateChanged(ChangeEvent e)
			{
				do_sldObstruction_stateChanged(e);
			}
		});
		panel.add(sldObstruction, "cell 1 16");

		lblObstructionValue = new JLabel("1.0");
		panel.add(lblObstructionValue, "cell 2 16");

		radBrush = new JRadioButton("Brush");
		panel.add(radBrush, "flowx,cell 0 17");
		radSelType.add(radBrush);

		radSelection = new JRadioButton("Selection");
		radSelection.setSelected(true);
		panel.add(radSelection, "cell 1 17");
		radSelType.add(radSelection);

		JButton btnApply = new JButton("Apply");
		btnApply.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnApply_actionPerformed(e);
			}
		});
		panel.add(btnApply, "cell 2 17,growx");

		JSeparator separator_2 = new JSeparator();
		panel.add(separator_2, "cell 0 19 5 1,grow");

		JButton btnDelete = new JButton("Delete");
		btnDelete.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnDelete_actionPerformed(e);
			}
		});
		panel.add(btnDelete, "cell 2 0");

		JLabel lblScript = new JLabel("Script");
		panel.add(lblScript, "cell 0 24,alignx left");

		txtScript = new JTextField();
		panel.add(txtScript, "cell 1 24 2 1,growx");
		txtScript.setColumns(10);

		JButton btnApplyScript = new JButton("Apply");
		btnApplyScript.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent arg0)
			{
				do_btnApplyScript_actionPerformed(arg0);
			}
		});
		panel.add(btnApplyScript, "cell 2 25,growx");

		JLabel lblEntityLayer = new JLabel("Entity Layer");
		panel.add(lblEntityLayer, "cell 0 27");
		spinnerEntityLayer.setModel(new SpinnerNumberModel(new Integer(1), new Integer(0), null, new Integer(1)));

		spinnerEntityLayer.addChangeListener(new ChangeListener()
		{
			public void stateChanged(ChangeEvent e)
			{
				m_editorListener.setEntityLayer(Integer.valueOf(spinnerEntityLayer.getValue().toString()));
			}
		});
		panel.add(spinnerEntityLayer, "cell 1 27,growx");

		Panel panel_1 = new Panel();
		tabbedPane.addTab("Entities", null, panel_1, null);
		panel_1.setLayout(new MigLayout("", "[][][grow][][grow]", "[][grow][][][][][][][][][][][]"));

		JLabel lblWorldEntities = new JLabel("World Entities");
		panel_1.add(lblWorldEntities, "cell 0 0 5 1,alignx center");

		JScrollPane scrollPane = new JScrollPane();
		panel_1.add(scrollPane, "cell 0 1 5 1,alignx center,growy");

		lstEntities = new JList();
		lstEntities.addListSelectionListener(new ListSelectionListener()
		{
			public void valueChanged(ListSelectionEvent arg0)
			{
				do_lstEntities_valueChanged(arg0);
			}
		});
		lstEntities.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		scrollPane.setViewportView(lstEntities);
		lstEntities.setModel(lstEntitiesModel);

		JButton btnEntityDelete = new JButton("Delete");
		btnEntityDelete.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnEntityDelete_actionPerformed(e);
			}
		});
		panel_1.add(btnEntityDelete, "cell 3 2,alignx right");

		JSeparator separator_1 = new JSeparator();
		panel_1.add(separator_1, "cell 4 3");

		JLabel lblNewLabel_2 = new JLabel("Name");
		panel_1.add(lblNewLabel_2, "cell 1 4,alignx trailing");

		txtEntityName = new JTextField();
		panel_1.add(txtEntityName, "cell 2 4 2 1,growx");
		txtEntityName.setColumns(10);

		JLabel lblClassName_1 = new JLabel("Class Name");
		panel_1.add(lblClassName_1, "cell 1 5,alignx trailing");

		txtEntityClass = new JTextField();
		panel_1.add(txtEntityClass, "cell 2 5 2 1,growx");
		txtEntityClass.setColumns(10);

		JLabel lblArguments = new JLabel("Arguments");
		panel_1.add(lblArguments, "cell 1 6,alignx center");

		txtEntityArguments = new JTextField();
		panel_1.add(txtEntityArguments, "cell 2 6 2 1,growx");
		txtEntityArguments.setColumns(10);

		JButton btnEntityApply = new JButton("Apply/Create");
		btnEntityApply.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnEntityApply_actionPerformed(e);
			}
		});
		panel_1.add(btnEntityApply, "cell 3 7,alignx right,aligny bottom");

		JSeparator separator_3 = new JSeparator();
		panel_1.add(separator_3, "cell 0 8 5 1");

		JLabel lblPostinstantiationInitializationVariables = new JLabel("Post-Instantiation Initialization Variables");
		panel_1.add(lblPostinstantiationInitializationVariables, "cell 1 9 4 1,alignx center");

		JLabel lblVariable = new JLabel("Variable");
		panel_1.add(lblVariable, "cell 1 10 2 1,alignx center");

		JLabel lblValue = new JLabel("Value");
		panel_1.add(lblValue, "cell 3 10,alignx center");

		lstEntityVariable = new JComboBox();
		lstEntityVariable.setEditable(true);
		lstEntityVariable.setModel(lstEntityVariableModel);
		panel_1.add(lstEntityVariable, "cell 1 11 2 1,growx");

		txtEntityVariableValue = new JTextField();
		panel_1.add(txtEntityVariableValue, "cell 3 11,growx");
		txtEntityVariableValue.setColumns(10);

		JButton btnSaveVariable = new JButton("Save Variable");
		btnSaveVariable.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnSaveVariable_actionPerformed(e);
			}
		});
		panel_1.add(btnSaveVariable, "cell 2 12");

		JButton btnDeleteVariable = new JButton("Delete Variable");
		btnDeleteVariable.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnDeleteVariable_actionPerformed(e);
			}
		});
		panel_1.add(btnDeleteVariable, "cell 3 12");

		JPanel panel_2 = new JPanel();
		tabbedPane.addTab("Export\\Import", null, panel_2, null);
		panel_2.setLayout(new MigLayout("", "[][grow]", "[][]"));

		JButton btnImportJmp = new JButton("Import JMP");
		btnImportJmp.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnImportJmp_actionPerformed(e);
			}
		});
		panel_2.add(btnImportJmp, "cell 0 1");

		JButton btnExportJmp = new JButton("Export JMP");
		btnExportJmp.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				do_btnExportJmp_actionPerformed(e);
			}
		});
		panel_2.add(btnExportJmp, "cell 1 1");

		String nullTile = JOptionPane.showInputDialog("Insert the path for the specified default\\null tile");

		if (nullTile == null)
			this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
		else
			m_editorListener.setNullSprite(nullTile);

	}

	protected void do_btnNewButton_actionPerformed(ActionEvent event)
	{
		try
		{

			int width = Integer.parseInt(txtWorldWidth.getText());
			int height = Integer.parseInt(txtWorldHeight.getText());
			int tileWidth = Integer.parseInt(txtTileWidth.getText());
			int tileHeight = Integer.parseInt(txtTileHeight.getText());

			m_editorListener.initializeWorld(width, height, tileWidth, tileHeight);

		} catch (NumberFormatException e)
		{
			JOptionPane.showMessageDialog(this, "Input was improperly formed: " + e.getMessage());
		}
	}

	public void selectedTile(final EditorTile tile)
	{
		SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
				if (radSelection.isSelected())
				{
					lblSelectedX.setText(String.valueOf(tile.getLocation().x));
					lblSelectedY.setText(String.valueOf(tile.getLocation().y));
					txtSelectedSprite.setText(tile.getSpriteName());
					lstDirection.getModel().setSelectedItem(tile.getDirection());
					lstSpriteAnimation.getModel().setSelectedItem(tile.getSpriteAnimation());

					chckbxEnableSplitting.setSelected(tile.enablesSplitting());
					chkTraversable.setSelected(tile.isTraversable());
					chkStatic.setSelected(tile.isStatic());

					m_selectedTile = tile;

					sldObstruction.setValue(Math.round(tile.getVisibilityObstruction() * 100));
				} else if (radBrush.isSelected())
				{
					m_selectedTile = tile;
					applyToTileSelection();
				}
			}
		});
	}

	protected void do_btnApply_actionPerformed(ActionEvent e)
	{
		applyToTileSelection();
	}

	public void applyToTileSelection()
	{
		if (m_selectedTile != null)
			m_editorListener.setTile(m_selectedTile, chkTraversable.isSelected(), chkStatic.isSelected(), txtSelectedSprite.getText(), (lstSpriteAnimation.getModel().getSelectedItem() == null ? "" : lstSpriteAnimation.getModel().getSelectedItem().toString()), (WorldDirection) lstDirection.getModel().getSelectedItem(), Float.valueOf(lblObstructionValue.getText()), chckbxEnableSplitting.isSelected());
	}

	public void clearEntities()
	{
		lstEntitiesModel.clear();
	}

	public void addEntity(EditorEntity entity)
	{
		lstEntitiesModel.addElement(entity);
	}

	public void setMapLayers(final int layers)
	{
		SwingUtilities.invokeLater(new Runnable()
		{

			@Override
			public void run()
			{
				lstLayer.removeAll();

				lstLayer.add("None");

				for (int i = 0; i < layers; i++)
					lstLayer.add(String.valueOf(i));

				if (layers == 0)
					lstLayer.select(0);
				else
					lstLayer.select(1);
			}
		});
	}

	public void setEntityLayer(final int layer)
	{
		SwingUtilities.invokeLater(new Runnable()
		{

			@Override
			public void run()
			{
				spinnerEntityLayer.setValue(layer);
			}
		});
	}

	protected void do_btnEntityApply_actionPerformed(ActionEvent e)
	{
		EditorEntity entity = null;

		for (int i = 0; i < lstEntitiesModel.getSize(); i++)
		{
			EditorEntity entityBuffer = lstEntitiesModel.getElementAt(i);

			if (entityBuffer.getName().compareTo(txtEntityName.getText()) == 0)
			{
				entity = entityBuffer;
			}
		}

		if (entity == null)
		{
			entity = new EditorEntity(txtEntityName.getText(), txtEntityClass.getText(), txtEntityArguments.getText());
			lstEntitiesModel.addElement(entity);
		} else
		{
			entity.setClassName(txtEntityClass.getText());
			entity.setArguments(txtEntityArguments.getText());
		}

		m_editorListener.refreshEntity(entity);
	}

	protected void do_lstEntities_valueChanged(ListSelectionEvent event)
	{
		EditorEntity entity = lstEntities.getSelectedValue();

		if (entity != null)
		{
			txtEntityName.setText(entity.getName());
			txtEntityClass.setText(entity.getClassName());
			txtEntityArguments.setText(entity.getArguments());
		}
	}

	protected void do_btnEntityDelete_actionPerformed(ActionEvent e)
	{
		EditorEntity entity = lstEntities.getSelectedValue();

		if (entity != null)
		{
			((DefaultListModel<EditorEntity>) lstEntities.getModel()).removeElement(entity);
			m_editorListener.removeEntity(entity);
		}
	}

	protected void do_btnSaveVariable_actionPerformed(ActionEvent e)
	{
		EditorEntity entity = lstEntities.getSelectedValue();

		if (entity != null)
		{
			entity.setPostInitAssignment(lstEntityVariable.getSelectedItem().toString(), txtEntityVariableValue.getText());
		}
		m_editorListener.refreshEntity(entity);
	}

	protected void do_btnDeleteVariable_actionPerformed(ActionEvent e)
	{
		EditorEntity entity = lstEntities.getSelectedValue();

		if (entity != null)
		{
			entity.removePostInitAssignment(lstEntityVariable.getSelectedItem().toString());

			lstEntityVariableModel.removeElement(lstEntityVariable.getSelectedItem());
		}

		m_editorListener.refreshEntity(entity);
	}

	protected void do_btnImportJmp_actionPerformed(ActionEvent e)
	{
		JFileChooser chooser = new JFileChooser();

		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				m_editorListener.openMap(VariableStore.create(new FileInputStream(chooser.getSelectedFile())));
			} catch (FileNotFoundException e1)
			{
				JOptionPane.showMessageDialog(this, "Error opening selected map file.");
			}
		}
	}

	protected void do_sldObstruction_stateChanged(ChangeEvent e)
	{
		if (sldObstruction != null && lblObstructionValue != null)
		{
			lblObstructionValue.setText(String.valueOf(((float) sldObstruction.getValue()) / 100.0F));
		}
	}

	protected void do_btnExportJmp_actionPerformed(ActionEvent e)
	{
		JFileChooser chooser = new JFileChooser();

		if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				ArrayList<EditorEntity> entities = new ArrayList<EditorEntity>();

				for (int i = 0; i < lstEntitiesModel.getSize(); i++)
					entities.add(lstEntitiesModel.get(i));

				m_editorListener.saveMap(new FileOutputStream(chooser.getSelectedFile()), entities);
			} catch (FileNotFoundException e1)
			{
				JOptionPane.showMessageDialog(this, "Error opening selected map file.");
			}
		}
	}

	protected void do_lstLayer_itemStateChanged(ItemEvent e)
	{
		m_editorListener.selectLayer(lstLayer.getSelectedIndex() - 1);
	}

	protected void do_btnNew_actionPerformed(ActionEvent e)
	{
		m_editorListener.createNewLayer();
	}

	protected void do_btnDelete_actionPerformed(ActionEvent e)
	{
		m_editorListener.deleteSelectedLayer();
	}

	protected void do_btnApplyScript_actionPerformed(ActionEvent arg0)
	{
		m_editorListener.applyScript(txtScript.getText());
	}

	public void setScript(final String script)
	{
		SwingUtilities.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				txtScript.setText(script);
			}
		});
	}
}
